Use core JS with VUE
1. we can write and JS statemetn in side {{ }} or Vue directive v-*
    just a single statment is allowerd
    no if or loops allowerd
    but XX ? x : y is allowerd

===================================================================

short hands

v-on:  >> @   example  v-on:click  == @clock
v-bind:href  >> :href  >> just remove the v-bind


====================== $mount and the el =================

let vm = new Vue({
    el:"#app",  ///this el propery tell Vue which element it need to attach
            /// Vue always pick just first one element which match with this selector
            // even if there are multiple element in dom for this selector
})

>> 1. this is same as 
let vm = new Vue( {...}});
vm.$mount('#app') >> in case you want to attach vue to the element based on some condition

>> 2. same as this
let vm = new Vue( {...}});
vm.$mount()  // start the vue
document.getElementById('#app').appendClild(vm.$el) 


==================================================================

VUE-CLI  
Start a project
1. $ vue init webpack-simple vue-cli
    >> init : initialize project
    >> webpack-simple : template name .. check vue cli github
    >> vue-cli : project name

2. open terminal to the new folder created by the last command

3.$ npm intall
    >> down load all the required dependencies based on data in package.json

4. $ npm run dev 
    >> run the development server
    >> keep it running
    >> it will keep compiling all the required files automatically as soon as we change a file



======================= COMPONENTS ================== *****  IMP ******

    Compnents names are case senstive
        components:{
        "iServerStatus": my_ServerStatus    (key:valye)
                ==>> iServerStatus (without quotes) :my_ServerStatus
                ==> or simply ==>  my_ServerStatus  (no key) (key = value)
                                        ==> this is same as my_ServerStatus:my_ServerStatus
        }
        >> iServerStatus  == i-server-status
        >> Servers = servers  ( as DOM is case insenstive ) (but JS is case senstive)



    ==== Style inside the components

    >> by default all the sytle css is global
    >> to limit the scope to the component leve Use "scoped"
        >>> <style  scoped>

 ****** COMMNUCTION between componets ********
        >>>> code >> \vue\vue cli project\vue-cli\src\components\commnucation

    PARENT CHILD
        WAY 1: Props and events
                1. parent can send data to child >> using child props
                2. child can send data to parent using >> this.$emit() >> broadcast event
                        >> event Vue() instance has an $emit() method
            

        WAY 2: props and callback functions
                1.  from parent send a function (pointer to the function) to child as property
                2.  child will execute that function.   

        WAY 3: SLOTS
                1. Props are like attributes to html elements like <a href=".."></a> where href is the attributes
                2. but SLOTS are like values
                       in parent > <child> SLOTS values </child>
                3. SLOTS are better when passing data like html itself.
                        >> we dont need to convert HTML into string
                        >> <child>
                                <DIV>....</DIV>
                                  <p>....</p> <a>...</a> 
                            </child>
                               
                               


    BETWEEN SIBLINGS
       1. sibling(s) can not talk to each other directly
               this is the path  we need to take to commnucate between child 1 and child 2   
               
            >>--> child 1 >> parent >> child 2    

       2. event bus: central object to pass data any where in the application
            >> this is instance of Vue()
                    eventBus = new Vue()
                    >> because eventBus is instance of Vue() >> it has its own $emit() methods
                            >>event Vue() instance has an $emit() method
            >>> code >> \vue\vue cli project\vue-cli\src\main.js        




===================================================================================
=============               v-model modifiers 
===================================================================================

>> vue cli project\vue-cli\src\components\forms\forms1.vue

1. v-model.lazy >> update Vue property only after onblur
2. v-model.trim >> trim the value
3. v-model.number >> convert the value into numbers 


 === Custom input ===
  
  >>> vue cli project\vue-cli\src\components\forms\myCustomInput.vue

  <input type="text"  v-model.trim="msg">

  same as

  <input type="text"
        v-bind:value="msg"              // Vue bind propery "msg" using v-bind >> so change in property also change in field value
        @input ="msg = $event.target.value"    // no Vue listen to the @input (@change) dom event >> and update the event value to the property
    >    

  >> so to create a customer input component >> we have to replicate this logic  

  ======================================================================
      DIRECTIVES  (v-if   v-for  v-text)
=============================================================================

1. Can create our own custom directive  
    >> register globaly in main.js   >> v-mydirective
        Vue.directive('mydirective',{config})
              >> {config} >> configuration using life cycle hooks
                    >> Directive life cycle has 5 hooks which we need to implement in the configuration function
        >> Life cycle hooks

        1. bind(el,binding,vnode) >> once directive is attached to the component
                >> el : element
                >> binding :                   (read only)
                >> vnode  : node in virtual dom    (read only)  
        2. inserted(el,binding,vnode) >> as soon as component is inserted in dom
        3. updated(el,binding,vnode,oldVnode) >> component is updated (with out children)
                >> oldVnode ( read only )      
        4. componentUpdated(el,binding,vnode,oldVnode) >> component is updated (with children)
        5. unbind(el,binding,vnode) : directive is removed from component
          

===============================================================================
==    MIXIN
===============================================================================
// Mixins >
// >>> have the same life cycle hooks as any Vue()
//    >>> when used in a Vue Component 
//    >>> Mixin hooks are executed filteredFruits

//  >>> this allow component to override the elements of Mixins 
//    

Mixin >> got merged with the components  (its not shared with the components) 
       >> so you can use "this" inside the Mixin
        >> "this" ==> current component where mixin is being used 

GLOBAL MIXIN (hard used) : as this will be merged to all the components of the application

>> in main.js  >>> no name needed as its Global
    Vue.mixin({
        created(){}
    })